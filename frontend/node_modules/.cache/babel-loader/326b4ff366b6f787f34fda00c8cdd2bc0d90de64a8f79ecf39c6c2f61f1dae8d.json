{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\1Uptrade-v3\\\\frontend\\\\src\\\\context\\\\AdminWalletContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  masterWalletBalance: 100000000,\n  // ₱100,000,000 initial balance\n  transactions: [],\n  loading: false,\n  error: null\n};\n\n// Action types\nconst ADMIN_WALLET_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  DEDUCT_FUNDS: 'DEDUCT_FUNDS',\n  ADD_TRANSACTION: 'ADD_TRANSACTION',\n  LOAD_WALLET_DATA: 'LOAD_WALLET_DATA',\n  CLEAR_ERROR: 'CLEAR_ERROR'\n};\n\n// Reducer\nconst adminWalletReducer = (state, action) => {\n  switch (action.type) {\n    case ADMIN_WALLET_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case ADMIN_WALLET_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case ADMIN_WALLET_ACTIONS.DEDUCT_FUNDS:\n      const newBalance = state.masterWalletBalance - action.payload.amount;\n      if (newBalance < 0) {\n        return {\n          ...state,\n          error: 'Insufficient funds in Admin Master Wallet'\n        };\n      }\n      return {\n        ...state,\n        masterWalletBalance: newBalance,\n        error: null\n      };\n    case ADMIN_WALLET_ACTIONS.ADD_TRANSACTION:\n      return {\n        ...state,\n        transactions: [action.payload, ...state.transactions]\n      };\n    case ADMIN_WALLET_ACTIONS.LOAD_WALLET_DATA:\n      return {\n        ...state,\n        masterWalletBalance: action.payload.balance || initialState.masterWalletBalance,\n        transactions: action.payload.transactions || [],\n        loading: false\n      };\n    case ADMIN_WALLET_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AdminWalletContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AdminWalletProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(adminWalletReducer, initialState);\n\n  // Load wallet data from localStorage on mount\n  useEffect(() => {\n    const savedWalletData = localStorage.getItem('adminWalletData');\n    if (savedWalletData) {\n      try {\n        const walletData = JSON.parse(savedWalletData);\n        dispatch({\n          type: ADMIN_WALLET_ACTIONS.LOAD_WALLET_DATA,\n          payload: walletData\n        });\n      } catch (error) {\n        console.error('Error loading admin wallet data:', error);\n      }\n    }\n  }, []);\n\n  // Save wallet data to localStorage whenever state changes\n  useEffect(() => {\n    const walletData = {\n      balance: state.masterWalletBalance,\n      transactions: state.transactions\n    };\n    localStorage.setItem('adminWalletData', JSON.stringify(walletData));\n  }, [state.masterWalletBalance, state.transactions]);\n\n  // Action creators\n  const deductFunds = (amount, userId, userName, description = 'Payment approval') => {\n    if (amount <= 0) {\n      dispatch({\n        type: ADMIN_WALLET_ACTIONS.SET_ERROR,\n        payload: 'Invalid amount'\n      });\n      return false;\n    }\n    if (state.masterWalletBalance < amount) {\n      dispatch({\n        type: ADMIN_WALLET_ACTIONS.SET_ERROR,\n        payload: 'Insufficient funds in Admin Master Wallet'\n      });\n      return false;\n    }\n\n    // Deduct funds\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.DEDUCT_FUNDS,\n      payload: {\n        amount\n      }\n    });\n\n    // Add transaction record\n    const transaction = {\n      id: Date.now().toString(),\n      type: 'deduction',\n      amount: amount,\n      userId: userId,\n      userName: userName,\n      description: description,\n      timestamp: new Date().toISOString(),\n      balanceAfter: state.masterWalletBalance - amount\n    };\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.ADD_TRANSACTION,\n      payload: transaction\n    });\n    return true;\n  };\n  const addFunds = (amount, description = 'Manual addition') => {\n    if (amount <= 0) {\n      dispatch({\n        type: ADMIN_WALLET_ACTIONS.SET_ERROR,\n        payload: 'Invalid amount'\n      });\n      return false;\n    }\n    const newBalance = state.masterWalletBalance + amount;\n    const transaction = {\n      id: Date.now().toString(),\n      type: 'addition',\n      amount: amount,\n      description: description,\n      timestamp: new Date().toISOString(),\n      balanceAfter: newBalance\n    };\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.ADD_TRANSACTION,\n      payload: transaction\n    });\n\n    // Update balance\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.LOAD_WALLET_DATA,\n      payload: {\n        balance: newBalance,\n        transactions: [transaction, ...state.transactions]\n      }\n    });\n    return true;\n  };\n  const clearError = () => {\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.CLEAR_ERROR\n    });\n  };\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP'\n    }).format(amount);\n  };\n  const value = {\n    ...state,\n    deductFunds,\n    addFunds,\n    clearError,\n    formatCurrency\n  };\n  return /*#__PURE__*/_jsxDEV(AdminWalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the context\n_s(AdminWalletProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = AdminWalletProvider;\nexport const useAdminWallet = () => {\n  _s2();\n  const context = useContext(AdminWalletContext);\n  if (!context) {\n    throw new Error('useAdminWallet must be used within an AdminWalletProvider');\n  }\n  return context;\n};\n_s2(useAdminWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AdminWalletContext;\nvar _c;\n$RefreshReg$(_c, \"AdminWalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","masterWalletBalance","transactions","loading","error","ADMIN_WALLET_ACTIONS","SET_LOADING","SET_ERROR","DEDUCT_FUNDS","ADD_TRANSACTION","LOAD_WALLET_DATA","CLEAR_ERROR","adminWalletReducer","state","action","type","payload","newBalance","amount","balance","AdminWalletContext","AdminWalletProvider","children","_s","dispatch","savedWalletData","localStorage","getItem","walletData","JSON","parse","console","setItem","stringify","deductFunds","userId","userName","description","transaction","id","Date","now","toString","timestamp","toISOString","balanceAfter","addFunds","clearError","formatCurrency","Intl","NumberFormat","style","currency","format","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAdminWallet","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/1Uptrade-v3/frontend/src/context/AdminWalletContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Initial state\nconst initialState = {\n  masterWalletBalance: 100000000, // ₱100,000,000 initial balance\n  transactions: [],\n  loading: false,\n  error: null\n};\n\n// Action types\nconst ADMIN_WALLET_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  DEDUCT_FUNDS: 'DEDUCT_FUNDS',\n  ADD_TRANSACTION: 'ADD_TRANSACTION',\n  LOAD_WALLET_DATA: 'LOAD_WALLET_DATA',\n  CLEAR_ERROR: 'CLEAR_ERROR'\n};\n\n// Reducer\nconst adminWalletReducer = (state, action) => {\n  switch (action.type) {\n    case ADMIN_WALLET_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case ADMIN_WALLET_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case ADMIN_WALLET_ACTIONS.DEDUCT_FUNDS:\n      const newBalance = state.masterWalletBalance - action.payload.amount;\n      if (newBalance < 0) {\n        return {\n          ...state,\n          error: 'Insufficient funds in Admin Master Wallet'\n        };\n      }\n      return {\n        ...state,\n        masterWalletBalance: newBalance,\n        error: null\n      };\n    case ADMIN_WALLET_ACTIONS.ADD_TRANSACTION:\n      return {\n        ...state,\n        transactions: [action.payload, ...state.transactions]\n      };\n    case ADMIN_WALLET_ACTIONS.LOAD_WALLET_DATA:\n      return {\n        ...state,\n        masterWalletBalance: action.payload.balance || initialState.masterWalletBalance,\n        transactions: action.payload.transactions || [],\n        loading: false\n      };\n    case ADMIN_WALLET_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AdminWalletContext = createContext();\n\n// Provider component\nexport const AdminWalletProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(adminWalletReducer, initialState);\n\n  // Load wallet data from localStorage on mount\n  useEffect(() => {\n    const savedWalletData = localStorage.getItem('adminWalletData');\n    if (savedWalletData) {\n      try {\n        const walletData = JSON.parse(savedWalletData);\n        dispatch({\n          type: ADMIN_WALLET_ACTIONS.LOAD_WALLET_DATA,\n          payload: walletData\n        });\n      } catch (error) {\n        console.error('Error loading admin wallet data:', error);\n      }\n    }\n  }, []);\n\n  // Save wallet data to localStorage whenever state changes\n  useEffect(() => {\n    const walletData = {\n      balance: state.masterWalletBalance,\n      transactions: state.transactions\n    };\n    localStorage.setItem('adminWalletData', JSON.stringify(walletData));\n  }, [state.masterWalletBalance, state.transactions]);\n\n  // Action creators\n  const deductFunds = (amount, userId, userName, description = 'Payment approval') => {\n    if (amount <= 0) {\n      dispatch({\n        type: ADMIN_WALLET_ACTIONS.SET_ERROR,\n        payload: 'Invalid amount'\n      });\n      return false;\n    }\n\n    if (state.masterWalletBalance < amount) {\n      dispatch({\n        type: ADMIN_WALLET_ACTIONS.SET_ERROR,\n        payload: 'Insufficient funds in Admin Master Wallet'\n      });\n      return false;\n    }\n\n    // Deduct funds\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.DEDUCT_FUNDS,\n      payload: { amount }\n    });\n\n    // Add transaction record\n    const transaction = {\n      id: Date.now().toString(),\n      type: 'deduction',\n      amount: amount,\n      userId: userId,\n      userName: userName,\n      description: description,\n      timestamp: new Date().toISOString(),\n      balanceAfter: state.masterWalletBalance - amount\n    };\n\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.ADD_TRANSACTION,\n      payload: transaction\n    });\n\n    return true;\n  };\n\n  const addFunds = (amount, description = 'Manual addition') => {\n    if (amount <= 0) {\n      dispatch({\n        type: ADMIN_WALLET_ACTIONS.SET_ERROR,\n        payload: 'Invalid amount'\n      });\n      return false;\n    }\n\n    const newBalance = state.masterWalletBalance + amount;\n    \n    const transaction = {\n      id: Date.now().toString(),\n      type: 'addition',\n      amount: amount,\n      description: description,\n      timestamp: new Date().toISOString(),\n      balanceAfter: newBalance\n    };\n\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.ADD_TRANSACTION,\n      payload: transaction\n    });\n\n    // Update balance\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.LOAD_WALLET_DATA,\n      payload: {\n        balance: newBalance,\n        transactions: [transaction, ...state.transactions]\n      }\n    });\n\n    return true;\n  };\n\n  const clearError = () => {\n    dispatch({\n      type: ADMIN_WALLET_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP'\n    }).format(amount);\n  };\n\n  const value = {\n    ...state,\n    deductFunds,\n    addFunds,\n    clearError,\n    formatCurrency\n  };\n\n  return (\n    <AdminWalletContext.Provider value={value}>\n      {children}\n    </AdminWalletContext.Provider>\n  );\n};\n\n// Custom hook to use the context\nexport const useAdminWallet = () => {\n  const context = useContext(AdminWalletContext);\n  if (!context) {\n    throw new Error('useAdminWallet must be used within an AdminWalletProvider');\n  }\n  return context;\n};\n\nexport default AdminWalletContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}