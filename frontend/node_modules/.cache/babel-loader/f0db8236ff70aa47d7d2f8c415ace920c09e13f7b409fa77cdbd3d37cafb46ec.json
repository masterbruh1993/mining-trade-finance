{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\nconst useSessionTimeout = (timeoutMinutes = 30) => {\n  _s();\n  const {\n    logout,\n    isAuthenticated,\n    isAdmin\n  } = useAuth();\n  const timeoutRef = useRef(null);\n  const warningTimeoutRef = useRef(null);\n  const lastActivityRef = useRef(Date.now());\n  const TIMEOUT_DURATION = timeoutMinutes * 60 * 1000; // Convert to milliseconds\n  const WARNING_DURATION = 5 * 60 * 1000; // 5 minutes before timeout\n\n  const resetTimeout = useCallback(() => {\n    lastActivityRef.current = Date.now();\n\n    // Clear existing timeouts\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    if (warningTimeoutRef.current) {\n      clearTimeout(warningTimeoutRef.current);\n    }\n\n    // Only set timeout for authenticated admin users\n    if (isAuthenticated && isAdmin) {\n      // Set warning timeout (5 minutes before actual timeout)\n      warningTimeoutRef.current = setTimeout(() => {\n        const confirmStayLoggedIn = window.confirm('Your session will expire in 5 minutes due to inactivity. Click OK to stay logged in.');\n        if (confirmStayLoggedIn) {\n          resetTimeout(); // Reset the timeout if user wants to stay\n        }\n      }, TIMEOUT_DURATION - WARNING_DURATION);\n\n      // Set actual logout timeout\n      timeoutRef.current = setTimeout(() => {\n        alert('Your session has expired due to inactivity. You will be logged out.');\n        logout();\n      }, TIMEOUT_DURATION);\n    }\n  }, [isAuthenticated, isAdmin, logout, TIMEOUT_DURATION, WARNING_DURATION]);\n  const handleActivity = useCallback(() => {\n    const now = Date.now();\n    const timeSinceLastActivity = now - lastActivityRef.current;\n\n    // Only reset if enough time has passed to avoid excessive resets\n    if (timeSinceLastActivity > 60000) {\n      // 1 minute threshold\n      resetTimeout();\n    }\n  }, [resetTimeout]);\n  useEffect(() => {\n    // Initialize timeout when component mounts or auth state changes\n    if (isAuthenticated && isAdmin) {\n      resetTimeout();\n    } else {\n      // Clear timeouts when user is not authenticated or not admin\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      if (warningTimeoutRef.current) {\n        clearTimeout(warningTimeoutRef.current);\n      }\n    }\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      if (warningTimeoutRef.current) {\n        clearTimeout(warningTimeoutRef.current);\n      }\n    };\n  }, [isAuthenticated, isAdmin, resetTimeout]);\n  useEffect(() => {\n    // Activity event listeners\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n\n    // Add event listeners for user activity\n    events.forEach(event => {\n      document.addEventListener(event, handleActivity, true);\n    });\n    return () => {\n      // Cleanup event listeners\n      events.forEach(event => {\n        document.removeEventListener(event, handleActivity, true);\n      });\n    };\n  }, [handleActivity]);\n\n  // Return function to manually reset timeout (useful for API calls)\n  return {\n    resetTimeout,\n    timeRemaining: () => {\n      const elapsed = Date.now() - lastActivityRef.current;\n      return Math.max(0, TIMEOUT_DURATION - elapsed);\n    }\n  };\n};\n_s(useSessionTimeout, \"qAUQ/vhtD9ytgWPxni75gYCnZBM=\", false, function () {\n  return [useAuth];\n});\nexport default useSessionTimeout;","map":{"version":3,"names":["useEffect","useRef","useCallback","useAuth","useSessionTimeout","timeoutMinutes","_s","logout","isAuthenticated","isAdmin","timeoutRef","warningTimeoutRef","lastActivityRef","Date","now","TIMEOUT_DURATION","WARNING_DURATION","resetTimeout","current","clearTimeout","setTimeout","confirmStayLoggedIn","window","confirm","alert","handleActivity","timeSinceLastActivity","events","forEach","event","document","addEventListener","removeEventListener","timeRemaining","elapsed","Math","max"],"sources":["C:/Users/ADMIN/Desktop/1Uptrade-v3/frontend/src/hooks/useSessionTimeout.js"],"sourcesContent":["import { useEffect, useRef, useCallback } from 'react';\nimport { useAuth } from '../context/AuthContext';\n\nconst useSessionTimeout = (timeoutMinutes = 30) => {\n  const { logout, isAuthenticated, isAdmin } = useAuth();\n  const timeoutRef = useRef(null);\n  const warningTimeoutRef = useRef(null);\n  const lastActivityRef = useRef(Date.now());\n\n  const TIMEOUT_DURATION = timeoutMinutes * 60 * 1000; // Convert to milliseconds\n  const WARNING_DURATION = 5 * 60 * 1000; // 5 minutes before timeout\n\n  const resetTimeout = useCallback(() => {\n    lastActivityRef.current = Date.now();\n    \n    // Clear existing timeouts\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    if (warningTimeoutRef.current) {\n      clearTimeout(warningTimeoutRef.current);\n    }\n\n    // Only set timeout for authenticated admin users\n    if (isAuthenticated && isAdmin) {\n      // Set warning timeout (5 minutes before actual timeout)\n      warningTimeoutRef.current = setTimeout(() => {\n        const confirmStayLoggedIn = window.confirm(\n          'Your session will expire in 5 minutes due to inactivity. Click OK to stay logged in.'\n        );\n        \n        if (confirmStayLoggedIn) {\n          resetTimeout(); // Reset the timeout if user wants to stay\n        }\n      }, TIMEOUT_DURATION - WARNING_DURATION);\n\n      // Set actual logout timeout\n      timeoutRef.current = setTimeout(() => {\n        alert('Your session has expired due to inactivity. You will be logged out.');\n        logout();\n      }, TIMEOUT_DURATION);\n    }\n  }, [isAuthenticated, isAdmin, logout, TIMEOUT_DURATION, WARNING_DURATION]);\n\n  const handleActivity = useCallback(() => {\n    const now = Date.now();\n    const timeSinceLastActivity = now - lastActivityRef.current;\n    \n    // Only reset if enough time has passed to avoid excessive resets\n    if (timeSinceLastActivity > 60000) { // 1 minute threshold\n      resetTimeout();\n    }\n  }, [resetTimeout]);\n\n  useEffect(() => {\n    // Initialize timeout when component mounts or auth state changes\n    if (isAuthenticated && isAdmin) {\n      resetTimeout();\n    } else {\n      // Clear timeouts when user is not authenticated or not admin\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      if (warningTimeoutRef.current) {\n        clearTimeout(warningTimeoutRef.current);\n      }\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      if (warningTimeoutRef.current) {\n        clearTimeout(warningTimeoutRef.current);\n      }\n    };\n  }, [isAuthenticated, isAdmin, resetTimeout]);\n\n  useEffect(() => {\n    // Activity event listeners\n    const events = [\n      'mousedown',\n      'mousemove',\n      'keypress',\n      'scroll',\n      'touchstart',\n      'click'\n    ];\n\n    // Add event listeners for user activity\n    events.forEach(event => {\n      document.addEventListener(event, handleActivity, true);\n    });\n\n    return () => {\n      // Cleanup event listeners\n      events.forEach(event => {\n        document.removeEventListener(event, handleActivity, true);\n      });\n    };\n  }, [handleActivity]);\n\n  // Return function to manually reset timeout (useful for API calls)\n  return {\n    resetTimeout,\n    timeRemaining: () => {\n      const elapsed = Date.now() - lastActivityRef.current;\n      return Math.max(0, TIMEOUT_DURATION - elapsed);\n    }\n  };\n};\n\nexport default useSessionTimeout;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}